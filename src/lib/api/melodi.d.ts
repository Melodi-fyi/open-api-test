/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all threads */
        get: {
            parameters: {
                query?: {
                    /** @description Single thread ID or list of thread IDs to filter by */
                    ids?: number[];
                    /** @description Single external user ID or list of external user IDs to filter by */
                    externalUserIds?: string[];
                    /** @description Search term to filter threads */
                    search?: string;
                    /** @description Search term to filter by user */
                    userSearch?: string;
                    /** @description ID of the project to filter threads by */
                    projectId?: number;
                    /** @description Single intent ID or list of intent IDs to filter by */
                    intentIds?: number | number[];
                    /** @description Single user segment ID or list of user segment IDs to filter by */
                    userSegmentIds?: number[];
                    /** @description Filter threads created before this date (ISO 8601 format, e.g. 2024-03-21T00:00:00Z) */
                    before?: string;
                    /** @description Filter threads created after this date (ISO 8601 format, e.g. 2024-03-21T00:00:00Z) */
                    after?: string;
                    /** @description Number of threads to return per page */
                    pageSize?: number;
                    /** @description Page index for pagination */
                    pageIndex?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved list of threads */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            count: number;
                            rows: components["schemas"]["Thread"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update an existing thread */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description A thread object that needs to be updated */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateThreadRequest"];
                };
            };
            responses: {
                /** @description Thread successfully updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Thread"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Create a new thread */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description A thread object that needs to be created */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateThreadRequest"];
                };
            };
            responses: {
                /** @description Thread successfully created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Thread"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create user feedback
         * @description This API can be used instead of our Feedback UI component (thumbs up/down) to create feedbacks that will be visible in the Feedback Inbox.
         *     Note: This endpoint requires a publishable API key as a query parameter only.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FeedbackCreateRequest"];
                };
            };
            responses: {
                /** @description Feedback successfully created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalFeedback"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized - Missing or invalid publishable API key */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve projects for an organization */
        get: {
            parameters: {
                query: {
                    /** @description The ID of the organization to retrieve projects for */
                    organizationId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProjectRequest"];
                };
            };
            responses: {
                /** @description Project successfully created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Create or update an external user
         * @description Creates a new external user or updates an existing one if the externalId already exists.
         *     When creating a new user, segments will be automatically created if they don't exist.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description External user object for creation or update */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description External identifier for the user */
                        externalId: string;
                        /** @description User's email address */
                        email?: string | null;
                        /** @description User's name */
                        name?: string | null;
                        /** @description User's username */
                        username?: string | null;
                        /**
                         * @description Key-value pairs where the key is the segment type name and the value is the segment value
                         * @default {}
                         */
                        segments?: {
                            [key: string]: string;
                        };
                    };
                };
            };
            responses: {
                /** @description External user successfully created or updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalUser"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized - Invalid or missing API key */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Thread: {
            /** @description Unique identifier for the thread */
            id?: number | null;
            /** @description External thread ID */
            externalId?: string | null;
            /** @description ID of the organization to which the thread belongs */
            organizationId?: number;
            /** @description ID of the project to which the thread belongs, specify either projectId or projectName */
            projectId?: number | null;
            /** @description Name of the project to which the thread belongs, specify either projectId or projectName */
            projectName?: string | null;
            /** @description Array of messages associated with the thread */
            messages: (components["schemas"]["MarkdownMessage"] | components["schemas"]["JsonMessage"])[];
            externalUser?: components["schemas"]["CreateExternalUserRequest"] | null;
            /** @description Metadata associated with the thread */
            metadata?: {
                [key: string]: string;
            };
            /**
             * Format: date-time
             * @description Date when the thread was created
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date when the thread was last updated
             */
            updatedAt?: string;
        };
        /** Markdown Message */
        MarkdownMessage: {
            externalId?: string | null;
            /**
             * @default markdown
             * @enum {string}
             */
            type: "markdown";
            role: string;
            content: string | null;
            /** @default {} */
            metadata: {
                [key: string]: string;
            };
        };
        /** JSON Message */
        JsonMessage: {
            externalId?: string | null;
            /**
             * @default json
             * @enum {string}
             */
            type: "json";
            role: string;
            jsonContent: {
                [key: string]: unknown;
            };
            /** @default {} */
            metadata: {
                [key: string]: string;
            };
        };
        /** @description Message object that can be either a Markdown or JSON message.
         *     For Markdown messages, use the 'content' field.
         *     For JSON messages, use the 'jsonContent' field.
         *      */
        Message: components["schemas"]["MarkdownMessage"] | components["schemas"]["JsonMessage"];
        Error: {
            error?: string;
        };
        /** @description Create feedback request object. Feedback is always associated with a message:
         *     - If only externalThreadId is provided, feedback will be attached to the last message in the thread
         *     - If both externalThreadId and externalMessageId are provided, feedback will be attached to the specified message
         *     Note: externalThreadId is only unique per project, so including projectId is recommended to ensure correct thread identification.
         *      */
        FeedbackCreateRequest: {
            /**
             * @description Type of feedback
             * @enum {string}
             */
            feedbackType: "POSITIVE" | "NEGATIVE";
            /** @description Text content of the feedback */
            feedbackText?: string | null;
            /** @description External ID of the thread containing the target message */
            externalThreadId: string;
            /** @description ID of the specific message for feedback. If not provided, feedback will be attached to the thread's last message */
            externalMessageId?: string | null;
            /** @description Recommended - ID of the project this thread belongs to. Helps ensure correct thread identification */
            projectId?: number | null;
            /** @description External user information for associating feedback with a user */
            externalUser?: components["schemas"]["CreateExternalUserRequest"] | null;
            /**
             * @description Key-value pairs where:
             *     - key: attribute name (must match an existing attribute in the project)
             *     - value: option name (must match an existing option for that attribute)
             *
             * @example {
             *       "Quality": "Wonderful",
             *       "Relevance": "High"
             *     }
             */
            attributes?: {
                [key: string]: string;
            };
        };
        ExternalFeedbackMessageAssociation: {
            /**
             * Format: int32
             * @description Unique identifier for the message association
             */
            id: number;
            /**
             * Format: int32
             * @description ID of the associated message
             */
            messageId: number;
            /**
             * Format: int32
             * @description ID of the external feedback (unique)
             */
            externalFeedbackId: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ExternalFeedback: {
            /**
             * Format: int32
             * @description Unique identifier for the feedback
             */
            id: number;
            /** @description Type of the feedback */
            feedbackType?: string | null;
            /** @description Text content of the feedback */
            feedbackText?: string | null;
            /** @description Information about the external user who provided the feedback */
            externalUser?: components["schemas"]["CreateExternalUserRequest"] | null;
            /** @description List of attribute options with their full attribute details */
            attributeOptions: (components["schemas"]["AttributeOption"] & {
                attribute: components["schemas"]["Attribute"];
            })[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UserInfo: {
            id?: string | null;
            email: string;
        };
        JSONObject: {
            [key: string]: string | number | boolean | components["schemas"]["JSONObject"] | components["schemas"]["JSONArray"];
        };
        JSONArray: components["schemas"]["JSONObject"][];
        Project: {
            /**
             * Format: int32
             * @description Unique identifier for the project
             */
            id: number;
            /** @description Name of the project */
            name: string;
            /**
             * Format: int32
             * @description ID of the organization the project belongs to
             */
            organizationId: number;
        };
        CreateProjectRequest: {
            /** @description Name of the project to be created */
            name: string;
        };
        CreateThreadRequest: {
            externalId?: string | null;
            projectId: number;
            projectName?: string | null;
            messages: (components["schemas"]["MarkdownMessage"] | components["schemas"]["JsonMessage"])[];
            metadata?: {
                [key: string]: string;
            };
            externalUser?: components["schemas"]["CreateExternalUserRequest"] | null;
        } | {
            externalId?: string | null;
            projectId?: number | null;
            projectName: string;
            messages: (components["schemas"]["MarkdownMessage"] | components["schemas"]["JsonMessage"])[];
            metadata?: {
                [key: string]: string;
            };
            externalUser?: components["schemas"]["CreateExternalUserRequest"] | null;
        };
        /** @description Represents an attribute. Note: The combination of projectId and name must be unique.
         *      */
        Attribute: {
            /**
             * Format: int32
             * @description Unique identifier for the attribute
             */
            id: number;
            /**
             * Format: int32
             * @description ID of the organization this attribute belongs to
             */
            organizationId: number;
            /**
             * Format: int32
             * @description ID of the project this attribute belongs to
             */
            projectId: number;
            /** @description Name of the attribute */
            name: string;
            /** @description List of options available for this attribute */
            options: components["schemas"]["AttributeOption"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Represents an attribute option. Note: The combination of attributeId and name must be unique.
         *      */
        AttributeOption: {
            /**
             * Format: int32
             * @description Unique identifier for the attribute option
             */
            id: number;
            /**
             * Format: int32
             * @description ID of the parent attribute
             */
            attributeId: number;
            /** @description Name of the attribute option */
            name: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @description Represents an external user. Note: The combination of organizationId and externalId must be
         *     unique.
         *      */
        ExternalUser: {
            /** @description Unique identifier for the user */
            id: number;
            /** @description ID of the organization this user belongs to */
            organizationId: number;
            /** @description External identifier for the user */
            externalId: string;
            /** @description User's name */
            name?: string | null;
            /** @description User's email address */
            email?: string | null;
            /** @description User's username */
            username?: string | null;
            segments: {
                id: number;
                organizationId: number;
                name: string;
                userSegmentTypeId: number;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                type: {
                    id: number;
                    organizationId: number;
                    name: string;
                    /** Format: date-time */
                    createdAt: string;
                    /** Format: date-time */
                    updatedAt: string;
                };
            }[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Request object for creating or updating an external user */
        CreateExternalUserRequest: {
            /** @description External identifier for the user */
            externalId: string;
            /** @description User's email address. Will be transformed to undefined if null */
            email?: string | null;
            /** @description User's name. Will be transformed to undefined if null */
            name?: string | null;
            /** @description User's username. Will be transformed to undefined if null */
            username?: string | null;
            /**
             * @description Key-value pairs of segment information.
             *     Will be transformed to empty object if null or undefined.
             *
             * @default {}
             * @example {
             *       "team": "engineering",
             *       "role": "developer"
             *     }
             */
            segments: {
                [key: string]: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
